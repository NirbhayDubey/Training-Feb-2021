// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StackOverFlowApi.Models;

namespace StackOverFlowApi.Migrations
{
    [DbContext(typeof(TempStackOverFlowContext))]
    [Migration("20210516151806_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            //modelBuilder.Entity("StackOverFlowApi.Models.Answer", b =>
            //    {
            //        b.Property<int>("AnswerId")
            //            .ValueGeneratedOnAdd()
            //            .HasColumnType("int")
            //            .HasColumnName("AnswerID")
            //            .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            //        b.Property<string>("Answer1")
            //            .HasColumnType("nvarchar(max)")
            //            .HasColumnName("Answer");

            //        b.Property<int?>("QuestionId")
            //            .HasColumnType("int")
            //            .HasColumnName("QuestionID");

            //        b.Property<int?>("UserId")
            //            .HasColumnType("int")
            //            .HasColumnName("UserID");

            //        b.Property<int?>("Vote")
            //            .HasColumnType("int");

            //        b.HasKey("AnswerId");

            //        b.HasIndex("QuestionId");

            //        b.HasIndex("UserId");

            //        b.ToTable("Answers");
            //    });

            modelBuilder.Entity("StackOverFlowApi.Models.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            //modelBuilder.Entity("StackOverFlowApi.Models.Badge", b =>
            //    {
            //        b.Property<int>("BadgeId")
            //            .ValueGeneratedOnAdd()
            //            .HasColumnType("int")
            //            .HasColumnName("BadgeID")
            //            .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            //        b.Property<string>("BadgeCategory")
            //            .HasMaxLength(30)
            //            .HasColumnType("nvarchar(30)");

            //        b.Property<string>("BadgeDescription")
            //            .HasMaxLength(200)
            //            .HasColumnType("nvarchar(200)");

            //        b.Property<string>("BadgeName")
            //            .HasMaxLength(30)
            //            .HasColumnType("nvarchar(30)");

            //        b.Property<string>("BadgeType")
            //            .HasMaxLength(20)
            //            .HasColumnType("nvarchar(20)");

            //        b.HasKey("BadgeId");

            //        b.ToTable("Badges");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.BadgesEarnedByUser", b =>
            //    {
            //        b.Property<int>("Id")
            //            .ValueGeneratedOnAdd()
            //            .HasColumnType("int")
            //            .HasColumnName("ID")
            //            .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            //        b.Property<int?>("BadgeId")
            //            .HasColumnType("int")
            //            .HasColumnName("BadgeID");

            //        b.Property<DateTime?>("DateOfEarned")
            //            .HasColumnType("date");

            //        b.Property<int?>("UserId")
            //            .HasColumnType("int")
            //            .HasColumnName("UserID");

            //        b.HasKey("Id");

            //        b.HasIndex("BadgeId");

            //        b.HasIndex("UserId");

            //        b.ToTable("BadgesEarnedByUser");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.Bookmark", b =>
            //    {
            //        b.Property<int>("Id")
            //            .ValueGeneratedOnAdd()
            //            .HasColumnType("int")
            //            .HasColumnName("ID")
            //            .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            //        b.Property<int?>("QuestionId")
            //            .HasColumnType("int")
            //            .HasColumnName("QuestionID");

            //        b.Property<int?>("UserId")
            //            .HasColumnType("int")
            //            .HasColumnName("UserID");

            //        b.HasKey("Id");

            //        b.HasIndex("QuestionId");

            //        b.HasIndex("UserId");

            //        b.ToTable("Bookmarks");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.CompaniesToExclude", b =>
            //    {
            //        b.Property<int>("Id")
            //            .ValueGeneratedOnAdd()
            //            .HasColumnType("int")
            //            .HasColumnName("ID")
            //            .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            //        b.Property<string>("CompanyToExclude")
            //            .HasMaxLength(30)
            //            .HasColumnType("nvarchar(30)");

            //        b.Property<int?>("UserId")
            //            .HasColumnType("int")
            //            .HasColumnName("UserID");

            //        b.HasKey("Id");

            //        b.HasIndex("UserId");

            //        b.ToTable("CompaniesToExclude");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.Education", b =>
            //    {
            //        b.Property<int>("Id")
            //            .ValueGeneratedOnAdd()
            //            .HasColumnType("int")
            //            .HasColumnName("ID")
            //            .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            //        b.Property<string>("Degree")
            //            .HasMaxLength(30)
            //            .HasColumnType("nvarchar(30)");

            //        b.Property<int?>("FromYear")
            //            .HasColumnType("int");

            //        b.Property<string>("Summary")
            //            .HasMaxLength(200)
            //            .HasColumnType("nvarchar(200)");

            //        b.Property<int?>("ToYear")
            //            .HasColumnType("int");

            //        b.Property<string>("University")
            //            .HasMaxLength(50)
            //            .HasColumnType("nvarchar(50)");

            //        b.Property<int?>("UserId")
            //            .HasColumnType("int")
            //            .HasColumnName("UserID");

            //        b.HasKey("Id");

            //        b.HasIndex("UserId");

            //        b.ToTable("Education");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.IndustriesToExclude", b =>
            //    {
            //        b.Property<int>("Id")
            //            .ValueGeneratedOnAdd()
            //            .HasColumnType("int")
            //            .HasColumnName("ID")
            //            .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            //        b.Property<string>("IndustryToExclude")
            //            .HasMaxLength(30)
            //            .HasColumnType("nvarchar(30)");

            //        b.Property<int?>("UserId")
            //            .HasColumnType("int")
            //            .HasColumnName("UserID");

            //        b.HasKey("Id");

            //        b.HasIndex("UserId");

            //        b.ToTable("IndustriesToExclude");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.JobProfile", b =>
            //    {
            //        b.Property<int>("Id")
            //            .ValueGeneratedOnAdd()
            //            .HasColumnType("int")
            //            .HasColumnName("ID")
            //            .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            //        b.Property<string>("Industry")
            //            .HasMaxLength(30)
            //            .HasColumnType("nvarchar(30)");

            //        b.Property<string>("JobSearchStatus")
            //            .HasMaxLength(50)
            //            .HasColumnType("nvarchar(50)");

            //        b.Property<string>("JobType")
            //            .HasMaxLength(30)
            //            .HasColumnType("nvarchar(30)");

            //        b.Property<int?>("MaxExperience")
            //            .HasColumnType("int");

            //        b.Property<decimal?>("MinAnnualSalary")
            //            .HasColumnType("money");

            //        b.Property<int?>("MinExperience")
            //            .HasColumnType("int");

            //        b.Property<string>("Role")
            //            .HasMaxLength(30)
            //            .HasColumnType("nvarchar(30)");

            //        b.Property<int?>("UserId")
            //            .HasColumnType("int")
            //            .HasColumnName("UserID");

            //        b.HasKey("Id");

            //        b.HasIndex("UserId");

            //        b.ToTable("JobProfile");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.Question", b =>
            //    {
            //        b.Property<int>("QuestionId")
            //            .ValueGeneratedOnAdd()
            //            .HasColumnType("int")
            //            .HasColumnName("QuestionID")
            //            .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            //        b.Property<string>("Question1")
            //            .HasMaxLength(500)
            //            .HasColumnType("nvarchar(500)")
            //            .HasColumnName("Question");

            //        b.Property<DateTime?>("TimeOfAsk")
            //            .HasColumnType("datetime");

            //        b.Property<int?>("TotalViews")
            //            .HasColumnType("int");

            //        b.Property<int?>("UserId")
            //            .HasColumnType("int")
            //            .HasColumnName("UserID");

            //        b.Property<int?>("Vote")
            //            .HasColumnType("int");

            //        b.HasKey("QuestionId");

            //        b.HasIndex("UserId");

            //        b.ToTable("Questions");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.Tag", b =>
            //    {
            //        b.Property<int>("Id")
            //            .ValueGeneratedOnAdd()
            //            .HasColumnType("int")
            //            .HasColumnName("ID")
            //            .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            //        b.Property<int?>("QuestionId")
            //            .HasColumnType("int")
            //            .HasColumnName("QuestionID");

            //        b.Property<string>("TagName")
            //            .HasMaxLength(30)
            //            .HasColumnType("nvarchar(30)");

            //        b.HasKey("Id");

            //        b.HasIndex("QuestionId");

            //        b.ToTable("Tags");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.TechPreferNotToWorkWith", b =>
            //    {
            //        b.Property<int>("Id")
            //            .ValueGeneratedOnAdd()
            //            .HasColumnType("int")
            //            .HasColumnName("ID")
            //            .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            //        b.Property<string>("TechPeferNotToWorkWith")
            //            .HasMaxLength(30)
            //            .HasColumnType("nvarchar(30)");

            //        b.Property<int?>("UserId")
            //            .HasColumnType("int")
            //            .HasColumnName("UserID");

            //        b.HasKey("Id");

            //        b.HasIndex("UserId");

            //        b.ToTable("TechPreferNotToWorkWith");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.TechWantToWorkWith", b =>
            //    {
            //        b.Property<int>("Id")
            //            .ValueGeneratedOnAdd()
            //            .HasColumnType("int")
            //            .HasColumnName("ID")
            //            .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            //        b.Property<string>("TechYouWantToWorkWith")
            //            .HasMaxLength(30)
            //            .HasColumnType("nvarchar(30)");

            //        b.Property<int?>("UserId")
            //            .HasColumnType("int")
            //            .HasColumnName("UserID");

            //        b.HasKey("Id");

            //        b.HasIndex("UserId");

            //        b.ToTable("TechWantToWorkWith");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.TechnologiesUsedAsStudent", b =>
            //    {
            //        b.Property<int>("Id")
            //            .ValueGeneratedOnAdd()
            //            .HasColumnType("int")
            //            .HasColumnName("ID")
            //            .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            //        b.Property<string>("Technology")
            //            .HasMaxLength(20)
            //            .HasColumnType("nvarchar(20)");

            //        b.Property<int?>("UserId")
            //            .HasColumnType("int")
            //            .HasColumnName("UserID");

            //        b.HasKey("Id");

            //        b.HasIndex("UserId");

            //        b.ToTable("TechnologiesUsedAsStudent");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.TechnologiesUsedByUserInJob", b =>
            //    {
            //        b.Property<string>("Technologies")
            //            .HasMaxLength(20)
            //            .HasColumnType("nvarchar(20)");

            //        b.Property<int?>("UserId")
            //            .HasColumnType("int")
            //            .HasColumnName("UserID");

            //        b.HasIndex("UserId");

            //        b.ToTable("TechnologiesUsedByUserInJob");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.User", b =>
            //    {
            //        b.Property<int>("UserId")
            //            .ValueGeneratedOnAdd()
            //            .HasColumnType("int")
            //            .HasColumnName("UserID")
            //            .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            //        b.Property<string>("AboutUser")
            //            .HasMaxLength(200)
            //            .HasColumnType("nvarchar(200)");

            //        b.Property<string>("AppUserId")
            //            .HasColumnType("nvarchar(450)");

            //        b.Property<int>("ApplicationUserId")
            //            .HasColumnType("int");

            //        b.Property<string>("EmailId")
            //            .IsRequired()
            //            .HasMaxLength(50)
            //            .HasColumnType("nvarchar(50)")
            //            .HasColumnName("EmailID");

            //        b.Property<string>("FullName")
            //            .IsRequired()
            //            .HasMaxLength(30)
            //            .HasColumnType("nvarchar(30)");

            //        b.Property<string>("GitHub")
            //            .HasMaxLength(100)
            //            .HasColumnType("nvarchar(100)");

            //        b.Property<DateTime?>("LastSeen")
            //            .HasColumnType("datetime");

            //        b.Property<string>("Location")
            //            .HasMaxLength(50)
            //            .HasColumnType("nvarchar(50)");

            //        b.Property<string>("PhoneNumber")
            //            .HasMaxLength(10)
            //            .HasColumnType("nvarchar(10)");

            //        b.Property<int?>("ProfileViews")
            //            .HasColumnType("int");

            //        b.Property<string>("Title")
            //            .HasMaxLength(20)
            //            .HasColumnType("nvarchar(20)");

            //        b.Property<string>("Twitter")
            //            .HasMaxLength(100)
            //            .HasColumnType("nvarchar(100)");

            //        b.Property<string>("UserName")
            //            .IsRequired()
            //            .HasMaxLength(25)
            //            .HasColumnType("nvarchar(25)");

            //        b.Property<int?>("VisitedDays")
            //            .HasColumnType("int");

            //        b.HasKey("UserId");

            //        b.HasIndex("AppUserId");

            //        b.HasIndex(new[] { "EmailId" }, "UQ__Users__7ED91AEEC51ED829")
            //            .IsUnique();

            //        b.ToTable("Users");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.VwBadgesDetail", b =>
            //    {
            //        b.Property<string>("FullName")
            //            .IsRequired()
            //            .HasMaxLength(30)
            //            .HasColumnType("nvarchar(30)");

            //        b.Property<int?>("NumberOfBronzeBadges")
            //            .HasColumnType("int");

            //        b.Property<int?>("NumberOfGoldBadges")
            //            .HasColumnType("int");

            //        b.Property<int?>("NumberOfSilverBadges")
            //            .HasColumnType("int");

            //        b.Property<int>("UserId")
            //            .HasColumnType("int")
            //            .HasColumnName("UserID");

            //        b.ToView("VwBadgesDetails");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.VwQuestionDetail", b =>
            //    {
            //        b.Property<int?>("NumberOfAnswers")
            //            .HasColumnType("int");

            //        b.Property<string>("Question")
            //            .HasMaxLength(500)
            //            .HasColumnType("nvarchar(500)");

            //        b.Property<int>("QuestionId")
            //            .HasColumnType("int")
            //            .HasColumnName("QuestionID");

            //        b.Property<int?>("TotalViews")
            //            .HasColumnType("int");

            //        b.Property<int?>("VotesForQuestion")
            //            .HasColumnType("int");

            //        b.ToView("VwQuestionDetails");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.VwUserQadaetail", b =>
            //    {
            //        b.Property<string>("FullName")
            //            .IsRequired()
            //            .HasMaxLength(30)
            //            .HasColumnType("nvarchar(30)");

            //        b.Property<int?>("NumberOfAnwersGive")
            //            .HasColumnType("int");

            //        b.Property<int?>("NumberOfBadgesEarned")
            //            .HasColumnType("int");

            //        b.Property<int?>("NumberOfQuestionsAsked")
            //            .HasColumnType("int");

            //        b.Property<int>("UserId")
            //            .HasColumnType("int")
            //            .HasColumnName("UserID");

            //        b.ToView("VwUserQADaetails");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.WhereUserLikeToWork", b =>
            //    {
            //        b.Property<int>("Id")
            //            .ValueGeneratedOnAdd()
            //            .HasColumnType("int")
            //            .HasColumnName("ID")
            //            .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            //        b.Property<string>("Location")
            //            .HasMaxLength(30)
            //            .HasColumnType("nvarchar(30)");

            //        b.Property<int?>("UserId")
            //            .HasColumnType("int")
            //            .HasColumnName("UserID");

            //        b.HasKey("Id");

            //        b.HasIndex("UserId");

            //        b.ToTable("WhereUserLikeToWork");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.WorkExperience", b =>
            //    {
            //        b.Property<int>("Id")
            //            .ValueGeneratedOnAdd()
            //            .HasColumnType("int")
            //            .HasColumnName("ID")
            //            .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            //        b.Property<string>("CompanyName")
            //            .HasMaxLength(30)
            //            .HasColumnType("nvarchar(30)");

            //        b.Property<string>("JobTitle")
            //            .HasMaxLength(30)
            //            .HasColumnType("nvarchar(30)");

            //        b.Property<string>("Responsibilities")
            //            .HasMaxLength(200)
            //            .HasColumnType("nvarchar(200)");

            //        b.Property<int?>("UserId")
            //            .HasColumnType("int")
            //            .HasColumnName("UserID");

            //        b.Property<int?>("YearOfJoinning")
            //            .HasColumnType("int");

            //        b.HasKey("Id");

            //        b.HasIndex("UserId");

            //        b.ToTable("WorkExperience");
            //    });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StackOverFlowApi.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StackOverFlowApi.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StackOverFlowApi.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StackOverFlowApi.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            //modelBuilder.Entity("StackOverFlowApi.Models.Answer", b =>
            //    {
            //        b.HasOne("StackOverFlowApi.Models.Question", "Question")
            //            .WithMany("Answers")
            //            .HasForeignKey("QuestionId")
            //            .HasConstraintName("FK__Answers__Questio__65370702");

            //        b.HasOne("StackOverFlowApi.Models.User", "User")
            //            .WithMany("Answers")
            //            .HasForeignKey("UserId")
            //            .HasConstraintName("Fk_UserIDAnswers");

            //        b.Navigation("Question");

            //        b.Navigation("User");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.BadgesEarnedByUser", b =>
            //    {
            //        b.HasOne("StackOverFlowApi.Models.Badge", "Badge")
            //            .WithMany("BadgesEarnedByUsers")
            //            .HasForeignKey("BadgeId")
            //            .HasConstraintName("Fk_BadgeIDBadge");

            //        b.HasOne("StackOverFlowApi.Models.User", "User")
            //            .WithMany("BadgesEarnedByUsers")
            //            .HasForeignKey("UserId")
            //            .HasConstraintName("Fk_UserIDBadge");

            //        b.Navigation("Badge");

            //        b.Navigation("User");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.Bookmark", b =>
            //    {
            //        b.HasOne("StackOverFlowApi.Models.Question", "Question")
            //            .WithMany("Bookmarks")
            //            .HasForeignKey("QuestionId")
            //            .HasConstraintName("FK__Bookmarks__Quest__5F7E2DAC");

            //        b.HasOne("StackOverFlowApi.Models.User", "User")
            //            .WithMany("Bookmarks")
            //            .HasForeignKey("UserId")
            //            .HasConstraintName("FK__Bookmarks__UserI__5E8A0973");

            //        b.Navigation("Question");

            //        b.Navigation("User");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.CompaniesToExclude", b =>
            //    {
            //        b.HasOne("StackOverFlowApi.Models.User", "User")
            //            .WithMany("CompaniesToExcludes")
            //            .HasForeignKey("UserId")
            //            .HasConstraintName("FK__Companies__UserI__7755B73D");

            //        b.Navigation("User");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.Education", b =>
            //    {
            //        b.HasOne("StackOverFlowApi.Models.User", "User")
            //            .WithMany("Educations")
            //            .HasForeignKey("UserId")
            //            .HasConstraintName("Fk_UserIDEducation");

            //        b.Navigation("User");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.IndustriesToExclude", b =>
            //    {
            //        b.HasOne("StackOverFlowApi.Models.User", "User")
            //            .WithMany("IndustriesToExcludes")
            //            .HasForeignKey("UserId")
            //            .HasConstraintName("FK__Industrie__UserI__6BE40491");

            //        b.Navigation("User");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.JobProfile", b =>
            //    {
            //        b.HasOne("StackOverFlowApi.Models.User", "User")
            //            .WithMany("JobProfiles")
            //            .HasForeignKey("UserId")
            //            .HasConstraintName("FK__JobProfil__UserI__690797E6");

            //        b.Navigation("User");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.Question", b =>
            //    {
            //        b.HasOne("StackOverFlowApi.Models.User", "User")
            //            .WithMany("Questions")
            //            .HasForeignKey("UserId")
            //            .HasConstraintName("Fk_UserIDQuestion");

            //        b.Navigation("User");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.Tag", b =>
            //    {
            //        b.HasOne("StackOverFlowApi.Models.Question", "Question")
            //            .WithMany("Tags")
            //            .HasForeignKey("QuestionId")
            //            .HasConstraintName("FK__Tags__QuestionID__625A9A57");

            //        b.Navigation("Question");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.TechPreferNotToWorkWith", b =>
            //    {
            //        b.HasOne("StackOverFlowApi.Models.User", "User")
            //            .WithMany("TechPreferNotToWorkWiths")
            //            .HasForeignKey("UserId")
            //            .HasConstraintName("FK__TechPrefe__UserI__6EC0713C");

            //        b.Navigation("User");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.TechWantToWorkWith", b =>
            //    {
            //        b.HasOne("StackOverFlowApi.Models.User", "User")
            //            .WithMany("TechWantToWorkWiths")
            //            .HasForeignKey("UserId")
            //            .HasConstraintName("FK__TechWantT__UserI__719CDDE7");

            //        b.Navigation("User");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.TechnologiesUsedAsStudent", b =>
            //    {
            //        b.HasOne("StackOverFlowApi.Models.User", "User")
            //            .WithMany("TechnologiesUsedAsStudents")
            //            .HasForeignKey("UserId")
            //            .HasConstraintName("Fk_UserIDTech");

            //        b.Navigation("User");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.TechnologiesUsedByUserInJob", b =>
            //    {
            //        b.HasOne("StackOverFlowApi.Models.User", "User")
            //            .WithMany()
            //            .HasForeignKey("UserId")
            //            .HasConstraintName("Fk_UserIDTechInJob");

            //        b.Navigation("User");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.User", b =>
            //    {
            //        b.HasOne("StackOverFlowApi.Models.Authentication.ApplicationUser", "AppUser")
            //            .WithMany()
            //            .HasForeignKey("AppUserId");

            //        b.Navigation("AppUser");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.WhereUserLikeToWork", b =>
            //    {
            //        b.HasOne("StackOverFlowApi.Models.User", "User")
            //            .WithMany("WhereUserLikeToWorks")
            //            .HasForeignKey("UserId")
            //            .HasConstraintName("FK__WhereUser__UserI__74794A92");

            //        b.Navigation("User");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.WorkExperience", b =>
            //    {
            //        b.HasOne("StackOverFlowApi.Models.User", "User")
            //            .WithMany("WorkExperiences")
            //            .HasForeignKey("UserId")
            //            .HasConstraintName("Fk_UserIDWork");

            //        b.Navigation("User");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.Badge", b =>
            //    {
            //        b.Navigation("BadgesEarnedByUsers");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.Question", b =>
            //    {
            //        b.Navigation("Answers");

            //        b.Navigation("Bookmarks");

            //        b.Navigation("Tags");
            //    });

            //modelBuilder.Entity("StackOverFlowApi.Models.User", b =>
            //    {
            //        b.Navigation("Answers");

            //        b.Navigation("BadgesEarnedByUsers");

            //        b.Navigation("Bookmarks");

            //        b.Navigation("CompaniesToExcludes");

            //        b.Navigation("Educations");

            //        b.Navigation("IndustriesToExcludes");

            //        b.Navigation("JobProfiles");

            //        b.Navigation("Questions");

            //        b.Navigation("TechnologiesUsedAsStudents");

            //        b.Navigation("TechPreferNotToWorkWiths");

            //        b.Navigation("TechWantToWorkWiths");

            //        b.Navigation("WhereUserLikeToWorks");

            //        b.Navigation("WorkExperiences");
            //    });
#pragma warning restore 612, 618
        }
    }
}
